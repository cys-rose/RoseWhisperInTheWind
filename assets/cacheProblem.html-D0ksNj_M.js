import{_ as t,c as a,b as l,o as i}from"./app-UmRH3Hjg.js";const n={};function r(o,e){return i(),a("div",null,e[0]||(e[0]=[l('<h1 id="缓存问题三剑客" tabindex="-1"><a class="header-anchor" href="#缓存问题三剑客"><span>缓存问题三剑客</span></a></h1><h2 id="缓存穿透" tabindex="-1"><a class="header-anchor" href="#缓存穿透"><span>缓存穿透</span></a></h2><p>缓存穿透是说有大量恶意攻击，请求的我们的缓存中没有的数据，但其实数据库中也没有。但是因为缓存中没有数据，按理要打到数据库中，又因请求数量太多导致数据库宕机。</p><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案"><span>解决方案</span></a></h3><ol><li>允许缓存空数据，但是要设置一个过期时间。</li><li>使用布隆过滤器（提前预热一次布隆过滤器）。布隆过滤器是一个位图数组+几个哈希函数来计算 key 的好东西。但这时需要根据布隆过滤器的结果进行判断： <ol><li>如果布隆过滤器中没有，那么数据库中一定也没有。</li><li>如果布隆过滤器中有，那么数据库中可能会有，但是也可能是哈希冲突。这时就放行让请求去查缓存和数据库。但其实布隆过滤器出现哈希冲突的概率挺低的。</li></ol></li></ol><h2 id="缓存击穿" tabindex="-1"><a class="header-anchor" href="#缓存击穿"><span>缓存击穿</span></a></h2><p>缓存击穿是热点 key 问题，在集中式高并发访问的情况下，缓存中热点 key 过期或失效。导致大量请求打到数据库中而使数据库宕机。</p><h3 id="解决方案-1" tabindex="-1"><a class="header-anchor" href="#解决方案-1"><span>解决方案</span></a></h3><p>其实这要看你的热点 key 的业务情况是如何的了。</p><ol><li>如果这个热点 key 是几乎不或很少被修改的，可以选择不给其设置 ttl。</li><li>如果其更新不频繁且缓存刷新的整个流程耗时较少的情况下，可以选择逻辑过期+分布式锁来进行更新。</li><li>如果其更新频繁或者在缓存刷新的流程耗时较长的情况下，可以选择定时任务在 key 过期前进行更新，或者进行延期操作。</li></ol><h2 id="缓存雪崩" tabindex="-1"><a class="header-anchor" href="#缓存雪崩"><span>缓存雪崩</span></a></h2><p>缓存雪崩是指大量缓存 key 同时过期，很有可能是因为自己的缓存服务宕机了。然后大量请求打到了数据库，导致数据库也宕机了！可怜的数据库，为什么受伤的总是你！</p><h3 id="解决方案-2" tabindex="-1"><a class="header-anchor" href="#解决方案-2"><span>解决方案</span></a></h3><p>雪崩前：Redis 主从+哨兵，Redis Cluster 实现高可用，同时要开启 Redis 持久化。 雪崩中：采用本地缓存，使用 hystrix 限流+降级，保护数据库。（限流是说让每秒的请求量限制在多少以下，然后多出的请求走降级流程。也就是说返回一直默认的友好提示，或空值）如果采用限流后就可以保证数据库不会被打到宕机，这样就很好了！对于用户来说就多刷新几次也许就展示出结果了。 雪崩后：一旦重启 Redis，立马先根据持久化数据重建缓存。</p>',14)]))}const c=t(n,[["render",r],["__file","cacheProblem.html.vue"]]),h=JSON.parse('{"path":"/backend/redis/cacheProblem.html","title":"缓存问题三剑客","lang":"zh-CN","frontmatter":{"description":"缓存问题三剑客 缓存穿透 缓存穿透是说有大量恶意攻击，请求的我们的缓存中没有的数据，但其实数据库中也没有。但是因为缓存中没有数据，按理要打到数据库中，又因请求数量太多导致数据库宕机。 解决方案 允许缓存空数据，但是要设置一个过期时间。 使用布隆过滤器（提前预热一次布隆过滤器）。布隆过滤器是一个位图数组+几个哈希函数来计算 key 的好东西。但这时需要根...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/RoseWhisperInTheWind/backend/redis/cacheProblem.html"}],["meta",{"property":"og:site_name","content":"风中玫瑰的低语"}],["meta",{"property":"og:title","content":"缓存问题三剑客"}],["meta",{"property":"og:description","content":"缓存问题三剑客 缓存穿透 缓存穿透是说有大量恶意攻击，请求的我们的缓存中没有的数据，但其实数据库中也没有。但是因为缓存中没有数据，按理要打到数据库中，又因请求数量太多导致数据库宕机。 解决方案 允许缓存空数据，但是要设置一个过期时间。 使用布隆过滤器（提前预热一次布隆过滤器）。布隆过滤器是一个位图数组+几个哈希函数来计算 key 的好东西。但这时需要根..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-07T10:20:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-07T10:20:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"缓存问题三剑客\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-07T10:20:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Rose\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"缓存穿透","slug":"缓存穿透","link":"#缓存穿透","children":[{"level":3,"title":"解决方案","slug":"解决方案","link":"#解决方案","children":[]}]},{"level":2,"title":"缓存击穿","slug":"缓存击穿","link":"#缓存击穿","children":[{"level":3,"title":"解决方案","slug":"解决方案-1","link":"#解决方案-1","children":[]}]},{"level":2,"title":"缓存雪崩","slug":"缓存雪崩","link":"#缓存雪崩","children":[{"level":3,"title":"解决方案","slug":"解决方案-2","link":"#解决方案-2","children":[]}]}],"git":{"createdTime":1736245252000,"updatedTime":1736245252000,"contributors":[{"name":"Rose","email":"2677596161@qq.com","commits":1}]},"readingTime":{"minutes":2.34,"words":703},"filePathRelative":"backend/redis/cacheProblem.md","localizedDate":"2025年1月7日","excerpt":"\\n<h2>缓存穿透</h2>\\n<p>缓存穿透是说有大量恶意攻击，请求的我们的缓存中没有的数据，但其实数据库中也没有。但是因为缓存中没有数据，按理要打到数据库中，又因请求数量太多导致数据库宕机。</p>\\n<h3>解决方案</h3>\\n<ol>\\n<li>允许缓存空数据，但是要设置一个过期时间。</li>\\n<li>使用布隆过滤器（提前预热一次布隆过滤器）。布隆过滤器是一个位图数组+几个哈希函数来计算 key 的好东西。但这时需要根据布隆过滤器的结果进行判断：\\n<ol>\\n<li>如果布隆过滤器中没有，那么数据库中一定也没有。</li>\\n<li>如果布隆过滤器中有，那么数据库中可能会有，但是也可能是哈希冲突。这时就放行让请求去查缓存和数据库。但其实布隆过滤器出现哈希冲突的概率挺低的。</li>\\n</ol>\\n</li>\\n</ol>","autoDesc":true}');export{c as comp,h as data};
