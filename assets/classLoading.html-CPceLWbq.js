import{_ as t,c as i,b as e,o as a}from"./app-D5bmIM1_.js";const n={};function o(r,l){return a(),i("div",null,l[0]||(l[0]=[e('<h1 id="类加载过程" tabindex="-1"><a class="header-anchor" href="#类加载过程"><span>类加载过程</span></a></h1><p>加载 -&gt; 链接（验证-&gt;准备-&gt;解析）-&gt;初始化</p><h2 id="加载" tabindex="-1"><a class="header-anchor" href="#加载"><span>加载</span></a></h2><ol><li>通过类的全限定名来获取定义这个类的二进制字节流。</li><li>将此字节流的静态存储转化为方法区的运行时数据结构。</li><li>再内存中生成一个代表这个类的 java.lang.Class 对象。</li></ol><h2 id="链接" tabindex="-1"><a class="header-anchor" href="#链接"><span>链接</span></a></h2><ol><li>验证 <ol><li>文件格式验证</li><li>元数据验证</li><li>字节码验证</li></ol></li><li>准备 为静态变量赋初始值。**注意！！！**是赋初始值。比如 int 类型的赋为 0，long 类型的 0L char 类型的&#39;\\u0000&#39;等。</li><li>解析 将常量池中的符号引用转换为直接引用。 <ol><li>符号引用：比如 a-&gt;b(a 指向 b)</li><li>直接引用：比如 a-&gt;b 的内存地址(a 指向 b 的对象所在内存中的真正位置)</li></ol></li></ol><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化"><span>初始化</span></a></h2><ol><li>执行&lt;clinit&gt;()方法。即给所有的静态变量（类变量）赋值，并且执行静态代码块中的内容。</li><li>&lt;clinit&gt;不需要像&lt;init&gt;那样显示地调用父类构造器，Java 虚拟机会保证子类的&lt;clinit&gt;执行之前，父类的&lt;clinit&gt;已经执行完毕。并且&lt;clinit&gt;也不是必须存在的，如果没有第一条的需求就没有&lt;clinit&gt;方法。</li><li>还有一件事：&lt;clinit&gt;在多线程环境中会被正确地加锁同步（只有一个线程可以执行这个方法，而其他线程线程只能阻塞）。</li></ol>',8)]))}const c=t(n,[["render",o],["__file","classLoading.html.vue"]]),p=JSON.parse(`{"path":"/backendPro/jvm/classLoading.html","title":"类加载过程","lang":"zh-CN","frontmatter":{"description":"类加载过程 加载 -> 链接（验证->准备->解析）->初始化 加载 通过类的全限定名来获取定义这个类的二进制字节流。 将此字节流的静态存储转化为方法区的运行时数据结构。 再内存中生成一个代表这个类的 java.lang.Class 对象。 链接 验证 文件格式验证 元数据验证 字节码验证 准备 为静态变量赋初始值。**注意！！！**是赋初始值。比如 ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/RoseWhisperInTheWind/backendPro/jvm/classLoading.html"}],["meta",{"property":"og:site_name","content":"风中玫瑰的低语"}],["meta",{"property":"og:title","content":"类加载过程"}],["meta",{"property":"og:description","content":"类加载过程 加载 -> 链接（验证->准备->解析）->初始化 加载 通过类的全限定名来获取定义这个类的二进制字节流。 将此字节流的静态存储转化为方法区的运行时数据结构。 再内存中生成一个代表这个类的 java.lang.Class 对象。 链接 验证 文件格式验证 元数据验证 字节码验证 准备 为静态变量赋初始值。**注意！！！**是赋初始值。比如 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-07T10:20:52.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-07T10:20:52.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"类加载过程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-07T10:20:52.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Rose\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"加载","slug":"加载","link":"#加载","children":[]},{"level":2,"title":"链接","slug":"链接","link":"#链接","children":[]},{"level":2,"title":"初始化","slug":"初始化","link":"#初始化","children":[]}],"git":{"createdTime":1736245252000,"updatedTime":1736245252000,"contributors":[{"name":"Rose","email":"2677596161@qq.com","commits":1}]},"readingTime":{"minutes":1.28,"words":385},"filePathRelative":"backendPro/jvm/classLoading.md","localizedDate":"2025年1月7日","excerpt":"\\n<p>加载 -&gt; 链接（验证-&gt;准备-&gt;解析）-&gt;初始化</p>\\n<h2>加载</h2>\\n<ol>\\n<li>通过类的全限定名来获取定义这个类的二进制字节流。</li>\\n<li>将此字节流的静态存储转化为方法区的运行时数据结构。</li>\\n<li>再内存中生成一个代表这个类的 java.lang.Class 对象。</li>\\n</ol>\\n<h2>链接</h2>\\n<ol>\\n<li>验证\\n<ol>\\n<li>文件格式验证</li>\\n<li>元数据验证</li>\\n<li>字节码验证</li>\\n</ol>\\n</li>\\n<li>准备\\n为静态变量赋初始值。**注意！！！**是赋初始值。比如 int 类型的赋为 0，long 类型的 0L char 类型的'\\\\u0000'等。</li>\\n<li>解析\\n将常量池中的符号引用转换为直接引用。\\n<ol>\\n<li>符号引用：比如 a-&gt;b(a 指向 b)</li>\\n<li>直接引用：比如 a-&gt;b 的内存地址(a 指向 b 的对象所在内存中的真正位置)</li>\\n</ol>\\n</li>\\n</ol>","autoDesc":true}`);export{c as comp,p as data};
