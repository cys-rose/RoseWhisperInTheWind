import{_ as t,c as n,b as a,o as i}from"./app-Bbo_IWtf.js";const o="/RoseWhisperInTheWind/assets/%E9%80%9A%E4%BF%A1%E9%9B%86%E6%88%90%E6%A8%A1%E5%BC%8F-rJDDPkZu.png",l="/RoseWhisperInTheWind/assets/%E9%98%B2%E8%85%90%E5%B1%82-CAL27qBY.png",r={};function s(p,e){return i(),n("div",null,e[0]||(e[0]=[a('<h1 id="上下文映射" tabindex="-1"><a class="header-anchor" href="#上下文映射"><span>上下文映射</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>限界上下文封装了分离业务的能力，上下文映射则建立了限界上下文之间的关系。其目的是<strong>为了让软件模型、团队组织和通信集成之间的协作关系能够清晰呈现，为整个系统的各个领域特性团队提供一个清晰的视图</strong>。这个视图就是上下文映射图。</p><ol><li>提供服务的限界上下文成为“上游”，消费（调用）服务的限界上下文称为“下游”。</li></ol><h2 id="上下文映射模式" tabindex="-1"><a class="header-anchor" href="#上下文映射模式"><span>上下文映射模式</span></a></h2><p>其分为以下两种模式。我只把我在项目中用到的通信集成映射模式中的一部分（防腐层）整理了出来，因为我感觉这个设计确实非常好，而且也确实很常用。其他的就给大家分享一个 title，感兴趣的朋友请自行学习。</p><h3 id="通信集成模式" tabindex="-1"><a class="header-anchor" href="#通信集成模式"><span>通信集成模式</span></a></h3><p>U 是上游，D 是下游。圆形是领域层。 <img src="'+o+'" alt="Alt" loading="lazy"></p><ol><li>防腐层 通过添加防腐层，来方式下游限界上下文领域模型对上游限界上下文领域模型的过多依赖。而且还可以防止上游的变化影响到下游的代码。但如果添加了防腐层后，防腐层的接口不发送变化，下游是不会受到影响的。 <img src="'+l+'" alt="Alt" loading="lazy"></li><li>开放主机服务</li><li>发布语言</li><li>共享内核</li></ol><h3 id="团队协作模式" tabindex="-1"><a class="header-anchor" href="#团队协作模式"><span>团队协作模式</span></a></h3><ol><li>合作者</li><li>客户方/供应方</li></ol>',11)]))}const h=t(r,[["render",s],["__file","contextmapping.html.vue"]]),d=JSON.parse('{"path":"/DDD/contextmapping.html","title":"上下文映射","lang":"zh-CN","frontmatter":{"description":"上下文映射 概述 限界上下文封装了分离业务的能力，上下文映射则建立了限界上下文之间的关系。其目的是为了让软件模型、团队组织和通信集成之间的协作关系能够清晰呈现，为整个系统的各个领域特性团队提供一个清晰的视图。这个视图就是上下文映射图。 提供服务的限界上下文成为“上游”，消费（调用）服务的限界上下文称为“下游”。 上下文映射模式 其分为以下两种模式。我只...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/RoseWhisperInTheWind/DDD/contextmapping.html"}],["meta",{"property":"og:site_name","content":"风中玫瑰的低语"}],["meta",{"property":"og:title","content":"上下文映射"}],["meta",{"property":"og:description","content":"上下文映射 概述 限界上下文封装了分离业务的能力，上下文映射则建立了限界上下文之间的关系。其目的是为了让软件模型、团队组织和通信集成之间的协作关系能够清晰呈现，为整个系统的各个领域特性团队提供一个清晰的视图。这个视图就是上下文映射图。 提供服务的限界上下文成为“上游”，消费（调用）服务的限界上下文称为“下游”。 上下文映射模式 其分为以下两种模式。我只..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-25T13:04:20.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-25T13:04:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"上下文映射\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-25T13:04:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Rose\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"上下文映射模式","slug":"上下文映射模式","link":"#上下文映射模式","children":[{"level":3,"title":"通信集成模式","slug":"通信集成模式","link":"#通信集成模式","children":[]},{"level":3,"title":"团队协作模式","slug":"团队协作模式","link":"#团队协作模式","children":[]}]}],"git":{"createdTime":1735131860000,"updatedTime":1735131860000,"contributors":[{"name":"Rose","email":"2677596161@qq.com","commits":1}]},"readingTime":{"minutes":1.32,"words":396},"filePathRelative":"DDD/contextmapping.md","localizedDate":"2024年12月25日","excerpt":"\\n<h2>概述</h2>\\n<p>限界上下文封装了分离业务的能力，上下文映射则建立了限界上下文之间的关系。其目的是<strong>为了让软件模型、团队组织和通信集成之间的协作关系能够清晰呈现，为整个系统的各个领域特性团队提供一个清晰的视图</strong>。这个视图就是上下文映射图。</p>\\n<ol>\\n<li>提供服务的限界上下文成为“上游”，消费（调用）服务的限界上下文称为“下游”。</li>\\n</ol>\\n<h2>上下文映射模式</h2>\\n<p>其分为以下两种模式。我只把我在项目中用到的通信集成映射模式中的一部分（防腐层）整理了出来，因为我感觉这个设计确实非常好，而且也确实很常用。其他的就给大家分享一个 title，感兴趣的朋友请自行学习。</p>","autoDesc":true}');export{h as comp,d as data};
