import{_ as t,c as i,b as o,o as a}from"./app-DFDql4E9.js";const l={};function n(r,e){return a(),i("div",null,e[0]||(e[0]=[o('<h1 id="如何设计一个高并发系统" tabindex="-1"><a class="header-anchor" href="#如何设计一个高并发系统"><span>如何设计一个高并发系统</span></a></h1><p>首先我们要先明白什么是高并发系统，其要具体解决的问题有哪些？ 高并发系统：短时、大量访问。系统可以快速稳定响应。所以其核心要点是保证高性能和高可用。</p><h2 id="如何考虑" tabindex="-1"><a class="header-anchor" href="#如何考虑"><span>如何考虑</span></a></h2><p>可以从以下 6 点进行着手。 系统拆分 -&gt; 缓存加速 -&gt; MQ 异步削峰 -&gt; 数据分离 -&gt; 读写分离 -&gt; 服务监控</p><ol><li>系统拆分：可以使用微服务架构，微服务可以对某个模块进行水平扩展。</li><li>缓存加速：在 Web 层可以使用 <code>LocalStorage</code>，缓存层可以使用 Redis、Caffeine</li><li>MQ 异步削峰：将消息放到延时队列中，异步处理</li><li>数据分离：分库、分表（减少每个表保存的数据量）</li><li>读写分离：主从结构</li><li>服务监控：日志、埋点数据（帮助开发者和数据分析师了解用户如何与应用程序或网站交互，从而优化用户体验、提高产品性能以及支持商业决策。通过埋点，可以收集到诸如页面浏览、按钮点击、表单提交、滚动深度等各种用户行为数据。）</li></ol>',5)]))}const h=t(l,[["render",n],["__file","howtomakehighlevel.html.vue"]]),c=JSON.parse('{"path":"/anything/howtomakehighlevel.html","title":"如何设计一个高并发系统","lang":"zh-CN","frontmatter":{"description":"如何设计一个高并发系统 首先我们要先明白什么是高并发系统，其要具体解决的问题有哪些？ 高并发系统：短时、大量访问。系统可以快速稳定响应。所以其核心要点是保证高性能和高可用。 如何考虑 可以从以下 6 点进行着手。 系统拆分 -> 缓存加速 -> MQ 异步削峰 -> 数据分离 -> 读写分离 -> 服务监控 系统拆分：可以使用微服务架构，微服务可以对某...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/RoseWhisperInTheWind/anything/howtomakehighlevel.html"}],["meta",{"property":"og:site_name","content":"风中玫瑰的低语"}],["meta",{"property":"og:title","content":"如何设计一个高并发系统"}],["meta",{"property":"og:description","content":"如何设计一个高并发系统 首先我们要先明白什么是高并发系统，其要具体解决的问题有哪些？ 高并发系统：短时、大量访问。系统可以快速稳定响应。所以其核心要点是保证高性能和高可用。 如何考虑 可以从以下 6 点进行着手。 系统拆分 -> 缓存加速 -> MQ 异步削峰 -> 数据分离 -> 读写分离 -> 服务监控 系统拆分：可以使用微服务架构，微服务可以对某..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-20T08:42:04.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-20T08:42:04.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何设计一个高并发系统\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-20T08:42:04.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Rose\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"如何考虑","slug":"如何考虑","link":"#如何考虑","children":[]}],"git":{"createdTime":1737362524000,"updatedTime":1737362524000,"contributors":[{"name":"Rose","email":"2677596161@qq.com","commits":1}]},"readingTime":{"minutes":1.06,"words":319},"filePathRelative":"anything/howtomakehighlevel.md","localizedDate":"2025年1月20日","excerpt":"\\n<p>首先我们要先明白什么是高并发系统，其要具体解决的问题有哪些？\\n高并发系统：短时、大量访问。系统可以快速稳定响应。所以其核心要点是保证高性能和高可用。</p>\\n<h2>如何考虑</h2>\\n<p>可以从以下 6 点进行着手。\\n系统拆分 -&gt; 缓存加速 -&gt; MQ 异步削峰 -&gt; 数据分离 -&gt; 读写分离 -&gt; 服务监控</p>\\n<ol>\\n<li>系统拆分：可以使用微服务架构，微服务可以对某个模块进行水平扩展。</li>\\n<li>缓存加速：在 Web 层可以使用 <code>LocalStorage</code>，缓存层可以使用 Redis、Caffeine</li>\\n<li>MQ 异步削峰：将消息放到延时队列中，异步处理</li>\\n<li>数据分离：分库、分表（减少每个表保存的数据量）</li>\\n<li>读写分离：主从结构</li>\\n<li>服务监控：日志、埋点数据（帮助开发者和数据分析师了解用户如何与应用程序或网站交互，从而优化用户体验、提高产品性能以及支持商业决策。通过埋点，可以收集到诸如页面浏览、按钮点击、表单提交、滚动深度等各种用户行为数据。）</li>\\n</ol>","autoDesc":true}');export{h as comp,c as data};
