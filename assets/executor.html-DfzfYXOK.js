import{_ as t,c as o,b as r,o as i}from"./app-Bbo_IWtf.js";const a="/RoseWhisperInTheWind/assets/%E5%90%84%E4%B8%AAExecutor%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB-CMXNQkU-.png",c="/RoseWhisperInTheWind/assets/Executor%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B-bQnZYJwC.png",n={};function l(s,e){return i(),o("div",null,e[0]||(e[0]=[r('<h1 id="executor" tabindex="-1"><a class="header-anchor" href="#executor"><span>Executor</span></a></h1><p>MyBatis 中每次想要操作数据库都要建立一个 SqlSession，然后才能进行操作。可为了让类的职责更加清晰、单一。MyBatis 中增加了 Executor 这一模块，其用来执行数据库操作，或是说为操作数据库做准备并对结果进行处理（因为真正的执行 Sql 还是在 StatementHandler 中）。那我们先来了解一些这个 Executor 模块吧，其中的设计模式还是很有意思的。</p><h2 id="有哪些-executor-呢" tabindex="-1"><a class="header-anchor" href="#有哪些-executor-呢"><span>有哪些 Executor 呢</span></a></h2><figure><img src="'+a+'" alt="Executor中的结构" tabindex="0" loading="lazy"><figcaption>Executor中的结构</figcaption></figure><ul><li>BaseExecutor 是一个抽象类，里面封装了一级缓存的操作</li><li>SimpleExecutor 是最基础的执行器，没有什么花里胡哨的操作。</li><li>ReuseExecutor 对相同的 Sql 调用重用，免去重建 MappedStatement 的过程。</li><li>BatchExecutor 可以批量执行 Sql。</li></ul><h2 id="执行流程是什么样的呢" tabindex="-1"><a class="header-anchor" href="#执行流程是什么样的呢"><span>执行流程是什么样的呢</span></a></h2><p>我这里只给大家介绍了 SqlSession 中使用 SimpleExecutor 的流程，其实使用其他的 Executor 实现类也是一样的过程。 <img src="'+c+'" alt="Executor执行流程" loading="lazy"></p><ul><li>所以说其实最终是落到了具体的 Executor 实现类上，由其执行<code>doQuery()</code>方法</li><li>CacheExecutor 和 BaseExecutor 的设计不得不说真的太巧妙了，把一级缓存和二级缓存完美地衔接在一起!</li></ul>',8)]))}const p=t(n,[["render",l],["__file","executor.html.vue"]]),d=JSON.parse('{"path":"/backend/mybatis/executor.html","title":"Executor","lang":"zh-CN","frontmatter":{"description":"Executor MyBatis 中每次想要操作数据库都要建立一个 SqlSession，然后才能进行操作。可为了让类的职责更加清晰、单一。MyBatis 中增加了 Executor 这一模块，其用来执行数据库操作，或是说为操作数据库做准备并对结果进行处理（因为真正的执行 Sql 还是在 StatementHandler 中）。那我们先来了解一些这个 ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/RoseWhisperInTheWind/backend/mybatis/executor.html"}],["meta",{"property":"og:site_name","content":"风中玫瑰的低语"}],["meta",{"property":"og:title","content":"Executor"}],["meta",{"property":"og:description","content":"Executor MyBatis 中每次想要操作数据库都要建立一个 SqlSession，然后才能进行操作。可为了让类的职责更加清晰、单一。MyBatis 中增加了 Executor 这一模块，其用来执行数据库操作，或是说为操作数据库做准备并对结果进行处理（因为真正的执行 Sql 还是在 StatementHandler 中）。那我们先来了解一些这个 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-09T12:22:32.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-09T12:22:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Executor\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-01-09T12:22:32.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Rose\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"有哪些 Executor 呢","slug":"有哪些-executor-呢","link":"#有哪些-executor-呢","children":[]},{"level":2,"title":"执行流程是什么样的呢","slug":"执行流程是什么样的呢","link":"#执行流程是什么样的呢","children":[]}],"git":{"createdTime":1736425352000,"updatedTime":1736425352000,"contributors":[{"name":"Rose","email":"2677596161@qq.com","commits":1}]},"readingTime":{"minutes":1.08,"words":325},"filePathRelative":"backend/mybatis/executor.md","localizedDate":"2025年1月9日","excerpt":"\\n<p>MyBatis 中每次想要操作数据库都要建立一个 SqlSession，然后才能进行操作。可为了让类的职责更加清晰、单一。MyBatis 中增加了 Executor 这一模块，其用来执行数据库操作，或是说为操作数据库做准备并对结果进行处理（因为真正的执行 Sql 还是在 StatementHandler 中）。那我们先来了解一些这个 Executor 模块吧，其中的设计模式还是很有意思的。</p>\\n<h2>有哪些 Executor 呢</h2>\\n<figure><figcaption>Executor中的结构</figcaption></figure>\\n<ul>\\n<li>BaseExecutor 是一个抽象类，里面封装了一级缓存的操作</li>\\n<li>SimpleExecutor 是最基础的执行器，没有什么花里胡哨的操作。</li>\\n<li>ReuseExecutor 对相同的 Sql 调用重用，免去重建 MappedStatement 的过程。</li>\\n<li>BatchExecutor 可以批量执行 Sql。</li>\\n</ul>","autoDesc":true}');export{p as comp,d as data};
