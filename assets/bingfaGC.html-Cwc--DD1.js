import{_ as s,c as a,b as t,o as l}from"./app-DFDql4E9.js";const n={};function e(h,i){return l(),a("div",null,i[0]||(i[0]=[t(`<h1 id="并发标记" tabindex="-1"><a class="header-anchor" href="#并发标记"><span>并发标记</span></a></h1><p>并发标记是说：用户线程和 GC 线程同时进行的阶段。主要在 CMS 和 G1 中有这个阶段，为了减少 STW 的停顿时间。但是又会引入一些其它问题！</p><h2 id="对象消失问题" tabindex="-1"><a class="header-anchor" href="#对象消失问题"><span>对象消失问题</span></a></h2><ol><li>对象消失也就是漏标问题（存活对象没有被标记）这个错误是致命错误，不能被忍受的。主要原因是因为破坏了三色标记算法的原则。即：黑对象不能直接引用白对象，和所有白对象的被引用链必须包含至少一个灰对象。</li></ol><ul><li><p>上述第一点：是说一个黑对象在并发标记阶段又新增了一个引用（白对象）但是黑对象是被扫描过的，不能再被扫描了。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 初始状态：A（黑） -&gt; B（白）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 应用线程执行：</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">field</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> C</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 新增引用：A（黑） -&gt; C（白）</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">B </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     // 删除引用：A -&gt; B 断开</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// C漏标</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>上述第二点：是说灰对象断开了对白对象的引用，导致白对象无法被扫描。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 初始状态：A（灰） -&gt; B（白） -&gt; C（白）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 应用线程执行：</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">A</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">field</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 删除引用：A -&gt; B 断开</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">D</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">field</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> B</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 新增引用：D（黑） -&gt; B（白）</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// B,C 漏标</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><ol><li>三色标记是专门用于并发标记阶段，用于标记对象的存活状态算法，其中分成黑（对象已标记且所有引用也被标记）、灰（自己至少有一个引用未被标记）、白（未被标记）三种状态。</li><li>如何解决？ 在 CMS 和 G1 中提供了不同的解决方案。CMS 中采用增量更新，G1 中采用原始快照解决这个问题。 <ul><li>增量更新：记录新增的黑对白的引用，在后面重新扫描。也就是 CMS 的<strong>重新标记阶段</strong>。</li><li>原始快照：记录此时堆中所有存活对象的引用关系（形成初始快照，在初始标记阶段），然后记录被删的灰到白的引用。然后重新标记这些被删除引入的对象及其可达对象。，保证初始快照中存活的对象仍存活。G1 的<strong>最终标记阶段</strong>。</li></ul></li></ol><h2 id="浮动垃圾问题" tabindex="-1"><a class="header-anchor" href="#浮动垃圾问题"><span>浮动垃圾问题</span></a></h2><p>浮动垃圾是：原本已经被标记存活的对象，在后面继续并发标记时，这个对象的引用又消失了，但是我们已经把它标记成存活了，所以无法回头了。这个问题我们是可以容忍的，毕竟下次 GC 时就会被回收了。</p>`,8)]))}const p=s(n,[["render",e],["__file","bingfaGC.html.vue"]]),d=JSON.parse('{"path":"/backendPro/jvm/bingfaGC.html","title":"并发标记","lang":"zh-CN","frontmatter":{"description":"并发标记 并发标记是说：用户线程和 GC 线程同时进行的阶段。主要在 CMS 和 G1 中有这个阶段，为了减少 STW 的停顿时间。但是又会引入一些其它问题！ 对象消失问题 对象消失也就是漏标问题（存活对象没有被标记）这个错误是致命错误，不能被忍受的。主要原因是因为破坏了三色标记算法的原则。即：黑对象不能直接引用白对象，和所有白对象的被引用链必须包含至...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/RoseWhisperInTheWind/backendPro/jvm/bingfaGC.html"}],["meta",{"property":"og:site_name","content":"风中玫瑰的低语"}],["meta",{"property":"og:title","content":"并发标记"}],["meta",{"property":"og:description","content":"并发标记 并发标记是说：用户线程和 GC 线程同时进行的阶段。主要在 CMS 和 G1 中有这个阶段，为了减少 STW 的停顿时间。但是又会引入一些其它问题！ 对象消失问题 对象消失也就是漏标问题（存活对象没有被标记）这个错误是致命错误，不能被忍受的。主要原因是因为破坏了三色标记算法的原则。即：黑对象不能直接引用白对象，和所有白对象的被引用链必须包含至..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-13T06:23:55.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-13T06:23:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发标记\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-02-13T06:23:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Rose\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"对象消失问题","slug":"对象消失问题","link":"#对象消失问题","children":[]},{"level":2,"title":"浮动垃圾问题","slug":"浮动垃圾问题","link":"#浮动垃圾问题","children":[]}],"git":{"createdTime":1739427835000,"updatedTime":1739427835000,"contributors":[{"name":"Rose","email":"2677596161@qq.com","commits":1}]},"readingTime":{"minutes":2.16,"words":649},"filePathRelative":"backendPro/jvm/bingfaGC.md","localizedDate":"2025年2月13日","excerpt":"\\n<p>并发标记是说：用户线程和 GC 线程同时进行的阶段。主要在 CMS 和 G1 中有这个阶段，为了减少 STW 的停顿时间。但是又会引入一些其它问题！</p>\\n<h2>对象消失问题</h2>\\n<ol>\\n<li>对象消失也就是漏标问题（存活对象没有被标记）这个错误是致命错误，不能被忍受的。主要原因是因为破坏了三色标记算法的原则。即：黑对象不能直接引用白对象，和所有白对象的被引用链必须包含至少一个灰对象。</li>\\n</ol>\\n<ul>\\n<li>\\n<p>上述第一点：是说一个黑对象在并发标记阶段又新增了一个引用（白对象）但是黑对象是被扫描过的，不能再被扫描了。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 初始状态：A（黑） -&gt; B（白）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 应用线程执行：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">A</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">field</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> C</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // 新增引用：A（黑） -&gt; C（白）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">B </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> null</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">     // 删除引用：A -&gt; B 断开</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// C漏标</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n<li>\\n<p>上述第二点：是说灰对象断开了对白对象的引用，导致白对象无法被扫描。</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 初始状态：A（灰） -&gt; B（白） -&gt; C（白）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 应用线程执行：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">A</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">field</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> null</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // 删除引用：A -&gt; B 断开</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">D</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">field</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> B</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    // 新增引用：D（黑） -&gt; B（白）</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// B,C 漏标</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div></li>\\n</ul>","autoDesc":true}');export{p as comp,d as data};
